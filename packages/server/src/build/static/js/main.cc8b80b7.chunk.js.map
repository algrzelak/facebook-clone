{"version":3,"sources":["graphql/fragments.ts","graphql/queries.ts","pages/sign/DateField.tsx","graphql/mutations.ts","components/MyTextField.tsx","pages/sign/SignUpForm.tsx","hooks/sign/useSignUpFormManagement.ts","pages/sign/SignInForm.tsx","hooks/sign/useSignInFormManagement.ts","pages/Sign.tsx","hooks/useMe.ts","styled/StyledPaper.tsx","pages/home/CreatePostForm.tsx","hooks/post/useCreatePostForm.ts","hooks/usePopover.ts","components/posts/PostMenu.tsx","hooks/post/useDeletePost.ts","hooks/post/like/useLikeButtonManagement.ts","hooks/post/like/useLike.ts","hooks/post/like/useUnlike.ts","components/posts/like/LikeButton.tsx","components/posts/like/UnlikeButton.tsx","components/posts/Like.tsx","components/posts/Comment.tsx","utils.ts","components/posts/comment/DeleteButton.tsx","hooks/post/comment/useDeleteComment.ts","components/posts/comment/CommentItem.tsx","components/posts/comment/CommentList.tsx","components/posts/comment/CreateCommentForm.tsx","hooks/post/comment/useCreateCommentForm.ts","components/posts/comment/Comments.tsx","hooks/post/comment/useComments.ts","hooks/useToggleComments.ts","components/posts/PostItem.tsx","components/Posts.tsx","pages/Home.tsx","pages/home/SignOutButton.tsx","hooks/sign/useSignOut.ts","components/appHeader/Search.tsx","hooks/friend/useAcceptRequest.ts","components/appHeader/friendRequests/FriendRequestItem.tsx","hooks/friend/useRejectRequest.ts","components/EmptyList.tsx","components/appHeader/friendRequests/FriendRequestList.tsx","components/appHeader/FriendRequests.tsx","hooks/useFriendRequests.ts","components/appHeader/chats/ChatList.tsx","graphql/subscriptions.ts","components/appHeader/Chats.tsx","hooks/chat/useChats.ts","enums.ts","components/appHeader/notifications/NotificationItem.tsx","components/appHeader/notifications/NotificationList.tsx","components/appHeader/Notifications.tsx","hooks/useNotifications.ts","components/AppHeader.tsx","pages/profile/header/Background.tsx","pages/profile/header/BackgroundUpload.tsx","hooks/upload/useUpdateBackground.ts","pages/profile/header/ChatButton.tsx","types.ts","hooks/chat/useCreateChat.ts","hooks/friend/useFriendButton.ts","hooks/friend/useSendRequest.ts","hooks/friend/useUnfriend.ts","hooks/friend/useCancelRequest.ts","pages/profile/header/FriendButton.tsx","hooks/friend/useFriendshipStatus.ts","pages/profile/header/Menu.tsx","styled/StyledProfileAvatar.tsx","pages/profile/header/AvatarUpload.tsx","hooks/upload/useUpdateAvatarManagement.ts","pages/profile/header/myAvatar/EditWrapper.tsx","pages/profile/header/MyAvatar.tsx","pages/profile/Header.tsx","hooks/useProfileHeader.ts","pages/profile/Posts.tsx","hooks/post/usePosts.ts","pages/profile/friends/FriendItem.tsx","pages/profile/friends/FriendList.tsx","pages/profile/Friends.tsx","hooks/useFriends.ts","pages/Profile.tsx","hooks/useProfile.ts","pages/chat/CreateMessageForm.tsx","hooks/chat/useCreateMessageForm.ts","pages/chat/MessageItem.tsx","pages/chat/MessageList.tsx","pages/chat/Members.tsx","pages/Chat.tsx","hooks/chat/useChat.ts","App.tsx","index.tsx"],"names":["USER_PREVIEW","gql","POST_PREVIEW","GET_ME","GET_NOTIFICATIONS","GET_CHAT","GET_CHATS","GET_POSTS","GET_COMMENTS","GET_USERS","GET_FRIEND_REQUESTS","GET_USER","DateField","props","useField","field","error","touched","console","log","isError","TextField","fullWidth","margin","variant","id","name","autoComplete","type","helperText","CREATE_CHAT","DELETE_COMMENT","CREATE_MESSAGE","CREATE_COMMENT","LIKE_POST","UNLIKE_POST","SIGN_UP","SIGN_IN","SIGN_OUT","CREATE_POST","ACCEPT_REQUEST","SEND_REQUEST","REJECT_REQUEST","UNFRIEND","CANCEL_REQUEST","UPDATE_AVATAR","UPDATE_BACKGROUND","DELETE_POST","MyTextField","rest","useStyles","makeStyles","theme","form","width","marginTop","spacing","submit","SignUpForm","setVisible","classes","client","useApolloClient","useMutation","onError","graphQLErrors","message","update","store","data","signUp","writeQuery","query","me","input","a","passwordConfirm","birthday","restInput","variables","Date","resetStore","handleSubmit","initialValues","firstName","lastName","email","password","validationSchema","Yup","shape","useSignUpFormManagement","Typography","component","onSubmit","isSubmitting","noValidate","className","label","autoFocus","Button","color","disabled","Grid","container","justify","item","Link","href","onClick","SignInForm","signIn","useSignInFormManagement","size","xs","paper","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","SignInOrUp","useState","visible","Container","maxWidth","Avatar","useMe","readQuery","StyledPaper","withStyles","root","padding","Paper","createStyles","wrapper","flex","button","CreatePostForm","fullName","createPost","handleCreatePost","resetForm","optimisticResponse","user","likesInfo","likes","isLiked","commentsInfo","comments","content","createdAt","Math","random","toString","posts","edges","profilePosts","userId","useCreatePostForm","to","src","alt","rows","multiline","placeholder","usePopover","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","handleClose","undefined","PostMenu","handleDeletePost","deletePost","useParams","filter","post","useDeletePost","popoverId","IconButton","aria-label","aria-controls","aria-haspopup","Menu","keepMounted","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","useLikeButtonManagement","postId","handleLike","like","find","updatedPost","map","useLike","handleUnlike","unlike","useUnlike","LikeButton","UnlikeButton","Like","Comment","toggleComments","getFormat","sentTime","getTime","DeleteButton","handleDeleteComment","commentId","deleteComment","comment","useDeleteComment","link","fontWeight","textDecoration","date","justifyContent","CommentItem","ListItem","ListItemAvatar","ListItemText","primary","gutterBottom","format","CommentList","List","key","CircularProgress","CreateCommentForm","createComment","handleCreateComment","useCreateCommentForm","Comments","useQuery","useComments","header","postInfo","marginLeft","actions","PostItem","isCommentsVisible","setIsCommentsVisible","useToggleComments","fromNow","flexGrow","overflow","Posts","fetchMore","pageInfo","hasNextPage","endCursor","cursor","updateQuery","previousResult","fetchMoreResult","newEdges","newPageInfo","__typename","previousEdges","pageStart","loadMore","hasMore","loader","Home","SignOutButton","handleSignOut","signOut","navigate","useNavigate","useSignOut","fontSize","Search","setFilter","notifyOnNetworkStatusChange","loading","setOpen","Autocomplete","onOpen","getOptionSelected","option","value","getOptionLabel","options","users","onChange","_event","noOptionsText","renderInput","params","target","style","InputProps","endAdornment","Fragment","useAcceptRequest","acceptRequest","friendRequests","request","fromUser","handleAcceptRequest","FriendRequestItem","friendRequest","handleRejectRequest","rejectRequest","useRejectRequest","EmptyList","text","FriendRequestList","length","FriendRequests","useFriendRequests","Badge","badgeContent","Popover","background","unreadItem","textOverflow","whiteSpace","ChatList","chats","lastMessage","unread","MESSAGE_RECEIVED","Chats","unreadChatsCount","chat","useSubscription","onSubscriptionData","messageReceived","subscriptionData","messageReceivedChat","chatId","otherChats","updatedChats","useChats","edge","Status","NotificationType","NotificationItem","notification","PostLiked","receivedAt","NotificationList","notifications","Notifications","useNotifications","menuButton","marginRight","title","search","position","borderRadius","fade","common","white","breakpoints","up","searchIcon","height","pointerEvents","inputRoot","toolbar","inputInput","paddingLeft","transition","transitions","create","AppHeader","isSearchOpen","setIsSearchOpen","AppBar","onBlur","Toolbar","zIndex","img","objectFit","badge","Background","icon","BackgroundUpload","updateBackground","handleUpdateBackground","validity","files","Error","file","valid","useUpdateBackground","accept","htmlFor","FriendshipStatus","ChatButton","handleCreateChat","createChat","res","useCreateChat","useFriendButton","handleSendRequest","sendRequest","friendshipStatus","MeSentRequest","useSendRequest","handleUnfriend","unfriend","Stranger","useUnfriend","handleCancelRequest","cancelRequest","useCancelRequest","FriendButton","useFriendshipStatus","Friend","MeReceivedRequest","isMyProfile","StyledProfileAvatar","border","AvatarUpload","updateAvatar","handleUpdateAvatar","dataInStore","useUpdateAvatarManagement","EditWrapper","children","overlap","alignSelf","MyAvatar","marginBottom","grid","borderColor","borderStyle","borderWidth","images","imagesWrapper","ProfileHeader","useProfileHeader","align","usePosts","FriendItem","friend","FriendList","friends","Friends","useFriends","Profile","useProfile","sm","CreateMessageForm","createMessage","handleCreateMessage","messages","concat","useCreateMessageForm","wrap","wordWrap","MessageItem","MessageList","userInfo","Members","Chat","theChat","readChat","useChat","App","path","element","Sign","uploadLink","createUploadLink","uri","credentials","wsLink","WebSocketLink","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.cc8b80b7.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const USER_PREVIEW = gql`\n  fragment UserPreview on User {\n    id\n    fullName\n    avatar\n  }\n`;\n\nexport const POST_PREVIEW = gql`\n  fragment PostPreview on Post {\n    id\n    content\n    createdAt\n    likesInfo {\n      isLiked\n      likes\n    }\n    commentsInfo {\n      comments\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\nimport { POST_PREVIEW, USER_PREVIEW } from \"./fragments\";\n\nexport const GET_ME = gql`\n  query Me {\n    me {\n      ...UserPreview\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_NOTIFICATIONS = gql`\n  query Notifications {\n    notifications {\n      id\n      user {\n        ...UserPreview\n      }\n      postId\n      type\n      receivedAt\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_CHAT = gql`\n  query Chat($id: String!) {\n    chat(id: $id) {\n      id\n      messages {\n        id\n        content\n        sentTime\n        user {\n          ...UserPreview\n        }\n      }\n      users {\n        ...UserPreview\n      }\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_CHATS = gql`\n  query Chats {\n    chats {\n      id\n      users {\n        ...UserPreview\n      }\n      lastMessage {\n        id\n        sentTime\n        content\n      }\n      unread\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_IS_POST_LIKED = gql`\n  query IsPostLiked($postId: String!) {\n    isPostLiked(postId: $postId)\n  }\n`;\n\nexport const GET_POSTS = gql`\n  query Posts($cursor: Float, $userId: String) {\n    posts(cursor: $cursor, userId: $userId) {\n      edges {\n        ...PostPreview\n        user {\n          ...UserPreview\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n  ${USER_PREVIEW}\n  ${POST_PREVIEW}\n`;\n\nexport const GET_PROFILE_FEED = gql`\n  query ProfileFeed($id: ID!) {\n    profileFeed(id: $id) {\n      ...PostPreview\n    }\n  }\n  ${POST_PREVIEW}\n`;\n\nexport const GET_COMMENTS = gql`\n  query Comments($postId: String!) {\n    comments(postId: $postId) {\n      id\n      content\n      createdAt\n      user {\n        ...UserPreview\n      }\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_USERS = gql`\n  query Users($input: UsersInput!) {\n    users(input: $input) {\n      ...UserPreview\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_FRIEND_REQUESTS = gql`\n  query FriendRequests {\n    friendRequests {\n      id\n      sentTime\n      fromUser {\n        ...UserPreview\n      }\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_FRIENDS = gql`\n  query Friends($userId: String!) {\n    friends(userId: $userId) {\n      ...UserPreview\n      commonFriends {\n        ...UserPreview\n      }\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const GET_USER = gql`\n  query User($id: String!) {\n    user(id: $id) {\n      background\n      ...UserPreview\n      friends {\n        ...UserPreview\n      }\n      friendshipStatus\n    }\n  }\n  ${USER_PREVIEW}\n`;\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { TextField } from \"@material-ui/core\";\n\ninterface Props {\n  name: string;\n}\n\nfunction DateField({ ...props }: Props) {\n  const [field, { error, touched }] = useField(props);\n  console.log(field);\n\n  const isError = (error && touched) as boolean;\n\n  return (\n    <TextField\n      fullWidth\n      margin=\"normal\"\n      variant=\"outlined\"\n      id={props.name}\n      autoComplete={\"date\"}\n      type={\"date\"}\n      error={isError}\n      helperText={isError ? error : \"\"}\n      {...props}\n      {...field}\n    />\n  );\n}\n\nexport default DateField;\n","import { gql } from \"@apollo/client\";\nimport { POST_PREVIEW, USER_PREVIEW } from \"./fragments\";\n\nexport const CREATE_CHAT = gql`\n  mutation CreateChat($userId: String!) {\n    createChat(userId: $userId) {\n      id\n    }\n  }\n`;\n\nexport const DELETE_COMMENT = gql`\n  mutation DeleteComment($id: String!) {\n    deleteComment(id: $id)\n  }\n`;\n\nexport const CREATE_MESSAGE = gql`\n  mutation CreateMessage($input: CreateMessageInput!, $chatId: String!) {\n    createMessage(input: $input, chatId: $chatId) {\n      id\n      content\n    }\n  }\n`;\n\nexport const CREATE_COMMENT = gql`\n  mutation CreateComment($input: CreateCommentInput!, $postId: String!) {\n    createComment(input: $input, postId: $postId) {\n      id\n      content\n      createdAt\n    }\n  }\n`;\n\nexport const LIKE_POST = gql`\n  mutation LikePost($postId: String!) {\n    likePost(postId: $postId)\n  }\n`;\n\nexport const UNLIKE_POST = gql`\n  mutation UnlikePost($postId: String!) {\n    unlikePost(postId: $postId)\n  }\n`;\n\nexport const SIGN_UP = gql`\n  mutation SignUp($input: SignUpInput!) {\n    signUp(input: $input) {\n      ...UserPreview\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const SIGN_IN = gql`\n  mutation SignIn($input: SignInInput!) {\n    signIn(input: $input) {\n      ...UserPreview\n    }\n  }\n  ${USER_PREVIEW}\n`;\n\nexport const SIGN_OUT = gql`\n  mutation SignOut {\n    signOut\n  }\n`;\n\nexport const CREATE_POST = gql`\n  mutation CreatePost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      ...PostPreview\n      user {\n        ...UserPreview\n      }\n    }\n  }\n  ${POST_PREVIEW}\n  ${USER_PREVIEW}\n`;\n\nexport const ACCEPT_REQUEST = gql`\n  mutation AcceptRequest($userId: String!) {\n    acceptRequest(userId: $userId)\n  }\n`;\n\nexport const SEND_REQUEST = gql`\n  mutation SendRequest($userId: String!) {\n    sendRequest(userId: $userId)\n  }\n`;\n\nexport const REJECT_REQUEST = gql`\n  mutation RejectRequest($userId: String!) {\n    rejectRequest(userId: $userId)\n  }\n`;\n\nexport const UNFRIEND = gql`\n  mutation Unfriend($userId: String!) {\n    unfriend(userId: $userId)\n  }\n`;\n\nexport const CANCEL_REQUEST = gql`\n  mutation CancelRequest($userId: String!) {\n    cancelRequest(userId: $userId)\n  }\n`;\n\nexport const UPDATE_AVATAR = gql`\n  mutation UpdateAvatar($file: Upload!) {\n    updateAvatar(file: $file)\n  }\n`;\n\nexport const UPDATE_BACKGROUND = gql`\n  mutation UpdateBackground($file: Upload!) {\n    updateBackground(file: $file)\n  }\n`;\n\nexport const DELETE_POST = gql`\n  mutation DeletePost($id: String!) {\n    deletePost(id: $id)\n  }\n`;\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport { TextField } from \"@material-ui/core\";\n\ninterface Props {\n  name: string;\n  type: string;\n  label?: string;\n  autoFocus?: boolean;\n  required?: boolean;\n  rows?: number;\n  multiline?: boolean;\n  InputProps?: any;\n  variant?: any;\n  placeholder?: string;\n  autoComplete?: string;\n  margin?: any;\n}\n\nfunction MyTextField({ name, type, variant, ...rest }: Props) {\n  const [field, { error, touched }] = useField({\n    name,\n    type,\n  });\n\n  const isError = (error && touched) as boolean;\n\n  return (\n    <TextField\n      fullWidth\n      margin=\"normal\"\n      variant=\"outlined\"\n      id={name}\n      autoComplete={type}\n      type={type}\n      error={isError}\n      helperText={isError ? error : \"\"}\n      {...field}\n      {...rest}\n    />\n  );\n}\n\nexport default MyTextField;\n","import React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport DateField from \"./DateField\";\nimport { useSignUpFormManagement } from \"../../hooks/sign/useSignUpFormManagement\";\nimport { Button, Grid, Link } from \"@material-ui/core\";\nimport MyTextField from \"../../components/MyTextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction SignUpForm({ setVisible }: any) {\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    initialValues,\n    validationSchema,\n  } = useSignUpFormManagement();\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Sign Up\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form noValidate className={classes.form}>\n            <MyTextField\n              name=\"firstName\"\n              type=\"text\"\n              label=\"First name\"\n              autoFocus\n            />\n            <MyTextField name=\"lastName\" type=\"text\" label=\"Last name\" />\n            <MyTextField name=\"email\" type=\"email\" label=\"Email address\" />\n            <MyTextField name=\"password\" type=\"password\" label=\"Password\" />\n            <MyTextField\n              name=\"passwordConfirm\"\n              type=\"password\"\n              label=\"Confirm password\"\n            />\n            <DateField name=\"birthday\" />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={classes.submit}\n              fullWidth\n            >\n              Sign Up\n            </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item>\n                <Link\n                  variant=\"body2\"\n                  href=\"#\"\n                  onClick={() => setVisible(false)}\n                >\n                  Already have an account? Sign In\n                </Link>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default SignUpForm;\n","import { SignUpInput } from \"./../../../server/src/resolvers/SignUpInput\";\nimport { useApolloClient, useMutation } from \"@apollo/client\";\nimport * as Yup from \"yup\";\nimport { SIGN_UP } from \"../../graphql/mutations\";\nimport { GET_ME } from \"../../graphql/queries\";\nimport { UserPreview } from \"../../types\";\n\ninterface SignUpFormFields {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  passwordConfirm: string;\n  birthday: string;\n}\n\ninterface SignUpData {\n  signUp: UserPreview;\n}\n\ninterface SignUpVars {\n  input: SignUpInput;\n}\n\nexport const useSignUpFormManagement = () => {\n  const client = useApolloClient();\n  const [signUp] = useMutation<SignUpData, SignUpVars>(SIGN_UP, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n    update: (store, { data }) => {\n      data?.signUp &&\n        store.writeQuery({\n          query: GET_ME,\n          data: {\n            me: data.signUp,\n          },\n        });\n    },\n  });\n\n  async function handleSubmit(input: SignUpFormFields) {\n    // no need to send password confirm to the server because of validation\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { passwordConfirm, birthday, ...restInput } = input;\n\n    await signUp({\n      variables: { input: { ...restInput, birthday: new Date(birthday) } },\n    });\n    await client.resetStore();\n  }\n\n  const initialValues: SignUpFormFields = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirm: \"\",\n    // birthday is a string because otherwise the calendar doesn't work properly\n    // TODO\n    birthday: \"2000-01-01\",\n  };\n\n  const validationSchema = Yup.object().shape({});\n\n  return { handleSubmit, initialValues, validationSchema };\n};\n","import React, { Dispatch } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { useSignInFormManagement } from \"../../hooks/sign/useSignInFormManagement\";\nimport { Button, Grid, Link } from \"@material-ui/core\";\nimport MyTextField from \"../../components/MyTextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\ninterface Props {\n  setVisible: Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction SignInForm({ setVisible }: Props) {\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    initialValues,\n    validationSchema,\n  } = useSignInFormManagement();\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Sign In\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form noValidate className={classes.form}>\n            <MyTextField\n              name=\"email\"\n              type=\"email\"\n              label=\"Email address\"\n              autoFocus\n            />\n            <MyTextField name=\"password\" type=\"password\" label=\"Password\" />\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              color=\"primary\"\n              type=\"submit\"\n              fullWidth\n              className={classes.submit}\n              disabled={isSubmitting}\n            >\n              Sign In\n            </Button>\n\n            <Grid container>\n              <Grid item xs>\n                <Link\n                  variant=\"body2\"\n                  href=\"#\"\n                  onClick={() =>\n                    handleSubmit({\n                      email: \"demo@demo.demo\",\n                      password: \"Demo1234\",\n                    })\n                  }\n                >\n                  Too busy? Demo sign in\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link variant=\"body2\" href=\"#\" onClick={() => setVisible(true)}>\n                  Don&apos;t have an account? Sign Up\n                </Link>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default SignInForm;\n","import { SignInInput } from \"./../../../server/src/resolvers/SignInInput\";\nimport { UserPreview } from \"../../types\";\nimport { useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../../graphql/queries\";\nimport * as Yup from \"yup\";\nimport { SIGN_IN } from \"../../graphql/mutations\";\n\ninterface SignInData {\n  signIn: UserPreview;\n}\n\ninterface SignInVars {\n  input: SignInInput;\n}\n\nexport const useSignInFormManagement = () => {\n  const [signIn] = useMutation<SignInData, SignInVars>(SIGN_IN, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n    update: (store, { data }) => {\n      data?.signIn &&\n        store.writeQuery({\n          query: GET_ME,\n          data: {\n            me: data.signIn,\n          },\n        });\n    },\n  });\n\n  async function handleSubmit(input: SignInInput) {\n    return signIn({\n      variables: { input },\n    });\n  }\n\n  const initialValues: SignInInput = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({});\n\n  return { handleSubmit, initialValues, validationSchema };\n};\n","import React, { useState } from \"react\";\nimport SignUpForm from \"./sign/SignUpForm\";\nimport SignInForm from \"./sign/SignInForm\";\nimport { Avatar, Container } from \"@material-ui/core\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nfunction SignInOrUp() {\n  const [visible, setVisible] = useState(false);\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        {visible ? (\n          <SignUpForm setVisible={setVisible} />\n        ) : (\n          <SignInForm setVisible={setVisible} />\n        )}\n      </div>\n    </Container>\n  );\n}\n\nexport default SignInOrUp;\n","import { MeData } from \"./../types\";\nimport { GET_ME } from \"./../graphql/queries\";\nimport { useApolloClient } from \"@apollo/client\";\n\nexport const useMe = () => {\n  const client = useApolloClient();\n  const data = client.readQuery({ query: GET_ME }) as MeData;\n\n  return data.me;\n};\n","import { Paper, withStyles } from \"@material-ui/core\";\n\nexport const StyledPaper = withStyles((theme) => ({\n  root: {\n    maxWidth: 500,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n}))(Paper);\n","import React from \"react\";\nimport { Avatar, Button, createStyles, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useCreatePostForm } from \"../../hooks/post/useCreatePostForm\";\nimport MyTextField from \"../../components/MyTextField\";\nimport { Form, Formik } from \"formik\";\nimport { StyledPaper } from \"../../styled/StyledPaper\";\nimport { Link } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    form: {\n      width: \"100%\", // Fix IE 11 issue.\n    },\n    avatar: {\n      margin: theme.spacing(0, 2, 0, 1),\n    },\n    flex: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    button: {\n      margin: theme.spacing(2, 0, 1),\n    },\n  })\n);\n\nfunction CreatePostForm() {\n  const classes = useStyles();\n  const me = useMe();\n\n  const {\n    handleCreatePost,\n    initialValues,\n    validationSchema,\n  } = useCreatePostForm();\n\n  return (\n    <StyledPaper>\n      <div className={classes.wrapper}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleCreatePost}\n          validationSchema={validationSchema}\n        >\n          {() => (\n            <Form noValidate className={classes.form}>\n              <div className={classes.flex}>\n                <Link to={`/users/${me.id}`}>\n                  <Avatar\n                    src={me.avatar}\n                    alt={me.fullName}\n                    className={classes.avatar}\n                  />\n                </Link>\n                <MyTextField\n                  type=\"text\"\n                  name=\"content\"\n                  rows={2}\n                  multiline\n                  placeholder={`What's on your mind, ${me.fullName}?`}\n                  autoComplete=\"off\"\n                  margin=\"none\"\n                />\n              </div>\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n                fullWidth\n                className={classes.button}\n              >\n                Post\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </StyledPaper>\n  );\n}\n\nexport default CreatePostForm;\n","import { PostsData, Post } from \"./../../types\";\nimport { CreatePostInput } from \"../../../../server/src/resolvers/post/CreatePostInput\";\nimport { useMutation } from \"@apollo/client\";\nimport { GET_POSTS } from \"../../graphql/queries\";\nimport * as Yup from \"yup\";\nimport { CREATE_POST } from \"../../graphql/mutations\";\nimport { useMe } from \"../useMe\";\n\ninterface CreatePostData {\n  createPost: Post;\n}\n\ninterface CreatePostVars {\n  input: CreatePostInput;\n}\n\nexport function useCreatePostForm() {\n  const { id, fullName, avatar } = useMe();\n\n  const initialValues: CreatePostInput = {\n    content: \"\",\n  };\n\n  const [createPost] = useMutation<CreatePostData, CreatePostVars>(CREATE_POST);\n\n  function handleCreatePost(input: CreatePostInput, { resetForm }: any) {\n    return createPost({\n      variables: { input },\n      optimisticResponse: {\n        createPost: {\n          user: {\n            id,\n            fullName,\n            avatar,\n          },\n          likesInfo: {\n            likes: 0,\n            isLiked: false,\n          },\n          commentsInfo: {\n            comments: 0,\n          },\n          content: input.content,\n          createdAt: new Date(),\n          id: (Math.random() * 99999).toString(),\n        },\n      },\n      update: (store, { data }) => {\n        const { posts } = store.readQuery({ query: GET_POSTS }) as PostsData;\n\n        if (data?.createPost) {\n          store.writeQuery({\n            query: GET_POSTS,\n            data: {\n              posts: {\n                ...posts,\n                edges: [createPost, ...posts.edges],\n              },\n            },\n          });\n\n          // update own profile in cache if it's cached\n          try {\n            const { posts: profilePosts } = store.readQuery({\n              query: GET_POSTS,\n              variables: { userId: id },\n            }) as PostsData;\n\n            store.writeQuery({\n              query: GET_POSTS,\n              variables: { userId: id },\n              data: {\n                posts: {\n                  ...profilePosts,\n                  edges: [createPost, ...profilePosts.edges],\n                },\n              },\n            });\n\n            // if posts data not found do nothing\n          } catch {}\n        }\n        resetForm();\n      },\n    });\n  }\n\n  const validationSchema = Yup.object().shape({});\n\n  return { handleCreatePost, initialValues, validationSchema };\n}\n","import React, { useState } from \"react\";\n\ninterface Props {\n  name: string;\n}\n\nexport default function usePopover({ name }: Props) {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? name : undefined;\n  return { handleClick, handleClose, open, id, anchorEl };\n}\n","import React from \"react\";\nimport { IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useDeletePost } from \"../../hooks/post/useDeletePost\";\nimport usePopover from \"../../hooks/usePopover\";\n\ninterface Props {\n  id: string;\n}\n\nfunction PostMenu({ id }: Props) {\n  const { handleDeletePost } = useDeletePost({ id });\n  const {\n    id: popoverId,\n    handleClick,\n    handleClose,\n    open,\n    anchorEl,\n  } = usePopover({\n    name: \"menu\",\n  });\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"settings\"\n        aria-controls=\"menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreHorizIcon />\n      </IconButton>\n      <Menu\n        id={popoverId}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n      >\n        <MenuItem onClick={handleDeletePost}>Delete</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default PostMenu;\n","import { useParams } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { GET_POSTS } from \"../../graphql/queries\";\nimport { DELETE_POST } from \"../../graphql/mutations\";\nimport { PostsData } from \"../../types\";\n\ninterface Props {\n  id: string;\n}\n\nexport function useDeletePost({ id }: Props) {\n  const [deletePost] = useMutation(DELETE_POST, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  // undefined if it's home page\n  const { id: userId } = useParams();\n\n  function handleDeletePost() {\n    return deletePost({\n      variables: { id },\n      optimisticResponse: {\n        deletePost: true,\n      },\n      update: (store) => {\n        const variables = userId && {\n          variables: { userId },\n        };\n\n        const { posts } = store.readQuery({\n          query: GET_POSTS,\n          ...variables,\n        }) as PostsData;\n\n        store.writeQuery({\n          query: GET_POSTS,\n          ...variables,\n          data: {\n            posts: {\n              ...posts,\n              edges: posts.edges.filter((post) => post.id !== id),\n            },\n          },\n        });\n      },\n    });\n  }\n\n  return { handleDeletePost };\n}\n","import { useLike } from \"./useLike\";\nimport { useUnlike } from \"./useUnlike\";\n\ninterface Props {\n  postId: string;\n}\n\nexport default function useLikeButtonManagement({ postId }: Props) {\n  const { handleLike } = useLike({ postId });\n  const { handleUnlike } = useUnlike({ postId });\n\n  return { handleLike, handleUnlike };\n}\n","import { PostsData } from \"./../../../types\";\nimport { useParams } from \"react-router-dom\";\nimport { GET_POSTS } from \"../../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { LIKE_POST } from \"../../../graphql/mutations\";\n\ninterface Props {\n  postId: string;\n}\n\nexport function useLike({ postId }: Props) {\n  // gonna be undefined if it's home page\n  const { id: userId } = useParams();\n\n  const [like] = useMutation(LIKE_POST, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  async function handleLike() {\n    return like({\n      variables: { postId },\n      optimisticResponse: {\n        like: true,\n      },\n      update: (store) => {\n        const variables = userId && { variables: { userId } };\n\n        const { posts } = store.readQuery({\n          query: GET_POSTS,\n          ...variables,\n        }) as PostsData;\n\n        const post = posts.edges.find((post) => post.id === postId);\n        if (post) {\n          const { likesInfo } = post;\n          const updatedPost = {\n            ...post,\n            likesInfo: {\n              ...likesInfo,\n              likes: likesInfo.likes + 1,\n              isLiked: true,\n            },\n          };\n\n          store.writeQuery({\n            query: GET_POSTS,\n            ...variables,\n            data: {\n              posts: {\n                ...posts,\n                edges: posts.edges.map((post) =>\n                  post.id === postId ? updatedPost : post\n                ),\n              },\n            },\n          });\n        }\n      },\n    });\n  }\n\n  return { handleLike };\n}\n","import { useParams } from \"react-router-dom\";\nimport { PostsData } from \"../../../types\";\nimport { GET_POSTS } from \"../../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { UNLIKE_POST } from \"../../../graphql/mutations\";\n\ninterface Props {\n  postId: string;\n}\n\nexport function useUnlike({ postId }: Props) {\n  // gonna be undefined if it's home page\n  const { id: userId } = useParams();\n  const [unlike] = useMutation(UNLIKE_POST, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  async function handleUnlike() {\n    return unlike({\n      variables: { postId },\n      optimisticResponse: {\n        unlike: true,\n      },\n      update: (store) => {\n        const variables = userId && { variables: { userId } };\n\n        const { posts } = store.readQuery({\n          query: GET_POSTS,\n          ...variables,\n        }) as PostsData;\n\n        const post = posts.edges.find((post) => post.id === postId);\n        if (post) {\n          const { likesInfo } = post;\n          const updatedPost = {\n            ...post,\n            likesInfo: {\n              ...likesInfo,\n              likes: likesInfo.likes - 1,\n              isLiked: false,\n            },\n          };\n\n          store.writeQuery({\n            query: GET_POSTS,\n            ...variables,\n            data: {\n              posts: {\n                ...posts,\n                edges: posts.edges.map((post) =>\n                  post.id === postId ? updatedPost : post\n                ),\n              },\n            },\n          });\n        }\n      },\n    });\n  }\n\n  return { handleUnlike };\n}\n","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\ninterface Props {\n  handleClick: () => void;\n}\n\nexport default function LikeButton({ handleClick }: Props) {\n  return (\n    <IconButton onClick={handleClick}>\n      <FavoriteBorderIcon />\n    </IconButton>\n  );\n}\n","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\ninterface Props {\n  handleClick: () => void;\n}\n\nexport default function UnlikeButton({ handleClick }: Props) {\n  return (\n    <IconButton onClick={handleClick}>\n      <FavoriteIcon />\n    </IconButton>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport useLikeButtonManagement from \"../../hooks/post/like/useLikeButtonManagement\";\nimport { LikesInfo } from \"../../types\";\nimport LikeButton from \"./like/LikeButton\";\nimport UnlikeButton from \"./like/UnlikeButton\";\n\ninterface Props {\n  likesInfo: LikesInfo;\n  postId: string;\n}\n\nexport default function Like({ likesInfo, postId }: Props) {\n  const { handleLike, handleUnlike } = useLikeButtonManagement({\n    postId,\n  });\n\n  const { isLiked, likes } = likesInfo;\n\n  return (\n    <div>\n      {isLiked ? (\n        <UnlikeButton handleClick={handleUnlike} />\n      ) : (\n        <LikeButton handleClick={handleLike} />\n      )}\n      <Typography>{likes}</Typography>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButton, Typography } from \"@material-ui/core\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport { CommentsInfo } from \"../../types\";\n\ninterface Props {\n  postId: string;\n  commentsInfo: CommentsInfo;\n  toggleComments: () => void;\n}\n\nexport default function Comment({ commentsInfo, toggleComments }: Props) {\n  return (\n    <div>\n      <IconButton onClick={toggleComments}>\n        <CommentIcon />\n      </IconButton>\n      <Typography>{commentsInfo.comments}</Typography>\n    </div>\n  );\n}\n","export function getFormat(sentTime: Date) {\n  const today = new Date().getTime();\n  const sentDate = new Date(sentTime).getTime();\n  const AMOUNT_OF_MS_IN_DAY = 24 * 60 * 60 * 1000;\n  const daysSinceLastMessageSent = (today - sentDate) / AMOUNT_OF_MS_IN_DAY;\n\n  return daysSinceLastMessageSent < 1 ? \"HH:mm\" : \"DD/MM/YYYY\";\n}\n","import React from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { IconButton } from \"@material-ui/core\";\nimport useDeleteComment from \"../../../hooks/post/comment/useDeleteComment\";\n\ninterface Props {\n  commentId: string;\n  postId: string;\n}\n\nexport default function DeleteButton({ commentId, postId }: Props) {\n  const { handleDeleteComment } = useDeleteComment({ commentId, postId });\n  return (\n    <div>\n      <IconButton onClick={handleDeleteComment}>\n        <DeleteIcon />\n      </IconButton>\n    </div>\n  );\n}\n","import { PostsData } from \"./../../../types\";\nimport { CommentsData } from \"../../../types\";\nimport { GET_COMMENTS, GET_POSTS } from \"../../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_COMMENT } from \"../../../graphql/mutations\";\n\ninterface Props {\n  commentId: string;\n  postId: string;\n}\n\nexport default function useDeleteComment({ commentId, postId }: Props) {\n  const [deleteComment] = useMutation(DELETE_COMMENT);\n\n  function handleDeleteComment() {\n    return deleteComment({\n      variables: { id: commentId },\n      update: (store) => {\n        // update comments list\n        const { comments } = store.readQuery({\n          query: GET_COMMENTS,\n          variables: { postId },\n        }) as CommentsData;\n\n        store.writeQuery({\n          query: GET_COMMENTS,\n          variables: { postId },\n          data: {\n            comments: comments.filter((comment) => comment.id !== commentId),\n          },\n        });\n\n        // update comments count\n        const { posts } = store.readQuery({\n          query: GET_POSTS,\n        }) as PostsData;\n\n        const post = posts.edges.find((post) => post.id === postId);\n\n        if (post) {\n          const { commentsInfo } = post;\n          const updatedPost = {\n            ...post,\n            commentsInfo: {\n              ...commentsInfo,\n              comments: commentsInfo.comments - 1,\n            },\n          };\n          store.writeQuery({\n            query: GET_POSTS,\n            data: {\n              posts: {\n                ...posts,\n                edges: posts.edges.map((post) =>\n                  post.id === postId ? updatedPost : post\n                ),\n              },\n            },\n          });\n        }\n      },\n    });\n  }\n\n  return { handleDeleteComment };\n}\n","import React from \"react\";\nimport { Comment } from \"../../../types\";\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Moment from \"react-moment\";\nimport { getFormat } from \"../../../utils\";\nimport { Link } from \"react-router-dom\";\nimport { useMe } from \"../../../hooks/useMe\";\nimport DeleteButton from \"./DeleteButton\";\n\nconst useStyles = makeStyles(() => ({\n  link: {\n    fontWeight: \"bold\",\n    textDecoration: \"none\",\n    color: \"inherit\",\n  },\n  date: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n}));\n\ninterface Props {\n  comment: Comment;\n  postId: string;\n}\n\nexport default function CommentItem({ comment, postId }: Props) {\n  const classes = useStyles();\n  const me = useMe();\n  const { id, user, content, createdAt } = comment;\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Link to={`/users/${user.id}`} className={classes.link}>\n          <Avatar src={user.avatar} />\n        </Link>\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          <>\n            <Typography\n              variant=\"subtitle1\"\n              className={classes.link}\n              component={Link}\n              to={`/users/${user.id}`}\n            >\n              {user.fullName}\n            </Typography>\n            <Typography variant=\"subtitle2\">{content}</Typography>\n          </>\n        }\n      />\n      <Typography variant=\"caption\" gutterBottom>\n        <div className={classes.date}>\n          <Moment\n            // HH:mm when less than 1 day has elapsed\n            // DD/MM/YYYY when 1 day or more has elapsed\n            format={getFormat(createdAt)}\n            date={createdAt}\n          />\n        </div>\n        {me.id === user.id && <DeleteButton commentId={id} postId={postId} />}\n      </Typography>\n    </ListItem>\n  );\n}\n","import React from \"react\";\nimport { Comment } from \"../../../types\";\nimport { CircularProgress, List } from \"@material-ui/core\";\nimport CommentItem from \"./CommentItem\";\n\ninterface Props {\n  comments: Comment[] | undefined;\n  postId: string;\n}\n\nexport default function CommentList({ comments, postId }: Props) {\n  if (!comments) return <CircularProgress />;\n\n  return (\n    <List>\n      {comments.map((comment) => (\n        <CommentItem comment={comment} key={comment.id} postId={postId} />\n      ))}\n    </List>\n  );\n}\n","import React from \"react\";\nimport { useCreateCommentForm } from \"../../../hooks/post/comment/useCreateCommentForm\";\nimport { Formik, Form } from \"formik\";\nimport MyTextField from \"../../MyTextField\";\nimport { Button } from \"@material-ui/core\";\n\ninterface Props {\n  postId: string;\n}\n\nexport default function CreateCommentForm({ postId }: Props) {\n  const {\n    handleCreateComment,\n    initialValues,\n    validationSchema,\n  } = useCreateCommentForm({ postId });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleCreateComment}\n      validationSchema={validationSchema}\n    >\n      {() => (\n        <Form noValidate>\n          <div>\n            <MyTextField\n              type=\"text\"\n              name=\"content\"\n              autoComplete=\"off\"\n              margin=\"none\"\n            />\n          </div>\n          <Button variant=\"contained\" type=\"submit\" fullWidth>\n            Comment\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { PostsData } from \"./../../../types\";\nimport { CreateCommentInput } from \"./../../../../../server/src/resolvers/post/comment/CreateCommentInput\";\nimport { CommentsData } from \"../../../types\";\nimport { GET_COMMENTS, GET_POSTS } from \"../../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport * as Yup from \"yup\";\nimport { CREATE_COMMENT } from \"../../../graphql/mutations\";\nimport { useParams } from \"react-router-dom\";\n\ninterface CreateCommentData {\n  createComment: Comment;\n}\n\ninterface CreateCommentVars {\n  input: CreateCommentInput;\n  postId: string;\n}\n\ninterface Props {\n  postId: string;\n}\n\nexport function useCreateCommentForm({ postId }: Props) {\n  // id won't be undefined if its user's profile\n  const { id: userId } = useParams();\n\n  const initialValues: CreateCommentInput = {\n    content: \"\",\n  };\n\n  const [createComment] = useMutation<CreateCommentData, CreateCommentVars>(\n    CREATE_COMMENT\n  );\n\n  function handleCreateComment(input: CreateCommentInput, { resetForm }: any) {\n    return createComment({\n      variables: { input, postId },\n      update: (store, { data }) => {\n        const { comments } = store.readQuery({\n          query: GET_COMMENTS,\n          variables: { postId },\n        }) as CommentsData;\n\n        if (data) {\n          // update comments list\n          store.writeQuery({\n            query: GET_COMMENTS,\n            variables: { postId },\n            data: {\n              comments: [...comments, data.createComment],\n            },\n          });\n\n          // update comments count\n          const variables = userId && { variables: { userId } };\n\n          const { posts } = store.readQuery({\n            query: GET_POSTS,\n            ...variables,\n          }) as PostsData;\n\n          const post = posts.edges.find((post) => post.id === postId);\n          if (post) {\n            const { commentsInfo } = post;\n            const updatedPost = {\n              ...post,\n              commentsInfo: {\n                ...commentsInfo,\n                comments: commentsInfo.comments + 1,\n              },\n            };\n\n            store.writeQuery({\n              query: GET_POSTS,\n              ...variables,\n              data: {\n                posts: {\n                  ...posts,\n                  edges: posts.edges.map((post) =>\n                    post.id === postId ? updatedPost : post\n                  ),\n                },\n              },\n            });\n          }\n        }\n\n        resetForm();\n      },\n    });\n  }\n\n  const validationSchema = Yup.object().shape({});\n\n  return { handleCreateComment, initialValues, validationSchema };\n}\n","import React from \"react\";\nimport CommentList from \"./CommentList\";\nimport CreateCommentForm from \"./CreateCommentForm\";\nimport { useComments } from \"../../../hooks/post/comment/useComments\";\n\ninterface Props {\n  postId: string;\n}\n\nexport default function Comments({ postId }: Props) {\n  const comments = useComments({ postId });\n\n  return (\n    <div>\n      <CommentList comments={comments} postId={postId} />\n      <CreateCommentForm postId={postId} />\n    </div>\n  );\n}\n","import { CommentsData } from \"./../../../types\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_COMMENTS } from \"../../../graphql/queries\";\n\ninterface Props {\n  postId: string;\n}\n\ninterface CommentsVars {\n  postId: string;\n}\n\nexport function useComments({ postId }: Props) {\n  const { data } = useQuery<CommentsData, CommentsVars>(GET_COMMENTS, {\n    variables: { postId },\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  const comments = data?.comments;\n\n  return comments;\n}\n","import { useState } from \"react\";\n\nexport const useToggleComments = () => {\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n  const toggleComments = () => {\n    setIsCommentsVisible(!isCommentsVisible);\n  };\n\n  return { toggleComments, isCommentsVisible };\n};\n","import React from \"react\";\nimport { Avatar, Typography } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { StyledPaper } from \"../../styled/StyledPaper\";\nimport { Post } from \"../../types\";\nimport PostMenu from \"./PostMenu\";\nimport Like from \"./Like\";\nimport Comment from \"./Comment\";\nimport Comments from \"./comment/Comments\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { useToggleComments } from \"../../hooks/useToggleComments\";\n\ninterface Props {\n  post: Post;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    margin: theme.spacing(0, 0, 3),\n  },\n  link: {\n    textDecoration: \"none\",\n    fontWeight: \"bold\",\n    \"&:visited\": {\n      color: \"inherit\",\n    },\n  },\n  flex: {\n    display: \"flex\",\n  },\n  postInfo: {\n    marginLeft: theme.spacing(1),\n  },\n\n  actions: {\n    display: \"flex\",\n    \"& > *\": {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n  },\n}));\n\nfunction PostItem({ post }: Props) {\n  const classes = useStyles();\n  const me = useMe();\n  const { isCommentsVisible, toggleComments } = useToggleComments();\n  const { user } = post;\n\n  return (\n    <StyledPaper>\n      <div className={classes.header}>\n        <div className={classes.flex}>\n          <Link to={`/users/${user.id}`}>\n            <Avatar src={user.avatar} alt={user.fullName} />\n          </Link>\n          <div className={classes.postInfo}>\n            <Typography\n              className={classes.link}\n              variant=\"subtitle1\"\n              component={Link}\n              to={`/users/${user.id}`}\n            >\n              {user.fullName}\n            </Typography>\n            <Typography variant=\"subtitle2\">\n              <Moment fromNow date={post.createdAt} />\n            </Typography>\n          </div>\n        </div>\n        {me.id === user.id && <PostMenu id={post.id} />}\n      </div>\n\n      <div>\n        <Typography>{post.content}</Typography>\n      </div>\n      <div className={classes.actions}>\n        <Like postId={post.id} likesInfo={post.likesInfo} />\n        <Comment\n          postId={post.id}\n          commentsInfo={post.commentsInfo}\n          toggleComments={toggleComments}\n        />\n      </div>\n      {isCommentsVisible && <Comments postId={post.id} />}\n    </StyledPaper>\n  );\n}\n\nexport default PostItem;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_POSTS } from \"../graphql/queries\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PostItem from \"./posts/PostItem\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { PostsData } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: \"hidden\",\n    padding: theme.spacing(0, 3),\n  },\n}));\n\nfunction Posts() {\n  const classes = useStyles();\n  const { data, fetchMore } = useQuery<PostsData>(GET_POSTS, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  if (!data?.posts) return <CircularProgress />;\n\n  const {\n    edges: posts,\n    pageInfo: { hasNextPage, endCursor },\n  } = data.posts;\n\n  async function loadMore() {\n    await fetchMore({\n      query: GET_POSTS,\n      variables: { cursor: endCursor },\n      updateQuery: (previousResult: PostsData, { fetchMoreResult }: any) => {\n        if (!fetchMoreResult) return previousResult;\n\n        const {\n          edges: newEdges,\n          pageInfo: newPageInfo,\n          __typename,\n        } = fetchMoreResult.posts;\n\n        const { edges: previousEdges } = previousResult.posts;\n\n        return {\n          posts: {\n            __typename,\n            edges: [...previousEdges, ...newEdges],\n            pageInfo: newPageInfo,\n          },\n        };\n      },\n    });\n  }\n\n  return (\n    <div className={classes.root}>\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={loadMore}\n        hasMore={hasNextPage}\n        loader={<div key={endCursor}>Loading...</div>}\n      >\n        {posts.map((post) => (\n          <PostItem post={post} key={post.id} user={post.user} />\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default Posts;\n","import React from \"react\";\nimport CreatePostForm from \"./home/CreatePostForm\";\nimport { Container, createStyles } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Posts from \"../components/Posts\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {},\n  })\n);\n\nfunction Home() {\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\n      <CreatePostForm />\n      <Posts />\n    </Container>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport useSignOut from \"../../hooks/sign/useSignOut\";\n\nexport default function SignOutButton() {\n  const { handleSignOut } = useSignOut();\n\n  return (\n    <IconButton onClick={handleSignOut} color=\"inherit\">\n      <ExitToAppIcon fontSize=\"large\" />\n    </IconButton>\n  );\n}\n","import { useApolloClient, useMutation } from \"@apollo/client\";\nimport { SIGN_OUT } from \"../../graphql/mutations\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function useSignOut() {\n  const client = useApolloClient();\n  const [signOut] = useMutation(SIGN_OUT, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  const navigate = useNavigate();\n\n  async function handleSignOut() {\n    navigate(\"/\");\n    await signOut();\n    await client.resetStore();\n  }\n\n  return { handleSignOut };\n}\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_USERS } from \"../../graphql/queries\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { CircularProgress, TextField } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useNavigate } from \"react-router-dom\";\nimport { UserPreview } from \"../../types\";\nimport { UsersInput } from \"../../../../server/src/resolvers/user/UsersInput\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      maxWidth: \"400px\",\n      width: \"100%\",\n    },\n  })\n);\n\ninterface UsersData {\n  users: UserPreview[];\n}\n\ninterface UsersVars {\n  input: UsersInput;\n}\n\nfunction Search() {\n  const classes = useStyles();\n  const [filter, setFilter] = useState(\"\");\n  const { data, loading } = useQuery<UsersData, UsersVars>(GET_USERS, {\n    variables: { input: { filter } },\n    // so that loading isn't always true when user not found\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const [open, setOpen] = useState(false);\n  const navigate = useNavigate();\n  return (\n    <Autocomplete\n      className={classes.wrapper}\n      id=\"search-autocomplete\"\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      getOptionSelected={(option, value) => option.fullName === value.fullName}\n      getOptionLabel={(option) => option.fullName}\n      options={data?.users || []}\n      loading={loading}\n      // && user because otherwise it navigates to /users/undefined\n      onChange={(_event, user) => user && navigate(`/users/${user?.id}`)}\n      noOptionsText={\"User not found\"}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          value={filter}\n          onChange={(event) => setFilter(event.target.value)}\n          variant=\"outlined\"\n          fullWidth\n          autoFocus\n          style={{ backgroundColor: \"white\" }}\n          placeholder=\"Search someone\"\n          autoComplete=\"off\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport default Search;\n","import { FriendRequestsData } from \"./../../types\";\nimport { GET_FRIEND_REQUESTS } from \"./../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { ACCEPT_REQUEST } from \"../../graphql/mutations\";\n\ninterface Props {\n  userId: string;\n}\n\ninterface AcceptRequestData {\n  acceptRequest: boolean;\n}\n\nexport function useAcceptRequest({ userId }: Props) {\n  const [acceptRequest] = useMutation<AcceptRequestData>(ACCEPT_REQUEST, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  async function handleAcceptRequest() {\n    return acceptRequest({\n      variables: { userId },\n      optimisticResponse: {\n        acceptRequest: true,\n      },\n      update: (store) => {\n        const { friendRequests } = store.readQuery({\n          query: GET_FRIEND_REQUESTS,\n        }) as FriendRequestsData;\n\n        store.writeQuery({\n          query: GET_FRIEND_REQUESTS,\n          data: {\n            friendRequests: friendRequests.filter(\n              (request) => request.fromUser.id !== userId\n            ),\n          },\n        });\n      },\n    });\n  }\n\n  return { handleAcceptRequest };\n}\n","import React from \"react\";\nimport {\n  Avatar,\n  Button,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from \"@material-ui/core\";\nimport Moment from \"react-moment\";\nimport { FriendRequest } from \"../../../types\";\nimport { useAcceptRequest } from \"../../../hooks/friend/useAcceptRequest\";\nimport { useRejectRequest } from \"../../../hooks/friend/useRejectRequest\";\n\ninterface Props {\n  friendRequest: FriendRequest;\n}\n\nfunction FriendRequestItem({ friendRequest }: Props) {\n  const {\n    fromUser: { avatar, fullName, id: userId },\n    sentTime,\n  } = friendRequest;\n\n  const { handleAcceptRequest } = useAcceptRequest({ userId });\n  const { handleRejectRequest } = useRejectRequest({ userId });\n\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Avatar src={avatar} alt=\"Person's avatar\" />\n      </ListItemAvatar>\n      <div>\n        <ListItemText\n          primary={fullName}\n          secondary={<Moment fromNow date={sentTime} />}\n        />\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleAcceptRequest}\n            size={\"small\"}\n          >\n            Accept\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleRejectRequest}\n            size=\"small\"\n          >\n            Reject\n          </Button>\n        </div>\n      </div>\n    </ListItem>\n  );\n}\n\nexport default FriendRequestItem;\n","import { useMutation } from \"@apollo/client\";\nimport { GET_FRIEND_REQUESTS } from \"../../graphql/queries\";\nimport { FriendRequestsData } from \"../../types\";\nimport { REJECT_REQUEST } from \"../../graphql/mutations\";\n\ninterface Props {\n  userId: string;\n}\n\ninterface RejectRequestData {\n  rejectRequest: boolean;\n}\n\ninterface RejectRequestVars {\n  userId: string;\n}\n\nexport function useRejectRequest({ userId }: Props) {\n  const [rejectRequest] = useMutation<RejectRequestData, RejectRequestVars>(\n    REJECT_REQUEST,\n    {\n      onError: (error) => {\n        console.log(error.graphQLErrors[0].message);\n      },\n    }\n  );\n\n  async function handleRejectRequest() {\n    return rejectRequest({\n      variables: { userId },\n      optimisticResponse: {\n        rejectRequest: true,\n      },\n      update: (store) => {\n        const { friendRequests } = store.readQuery({\n          query: GET_FRIEND_REQUESTS,\n        }) as FriendRequestsData;\n\n        store.writeQuery({\n          query: GET_FRIEND_REQUESTS,\n          data: {\n            friendRequests: friendRequests.filter(\n              (request) => request.fromUser.id !== userId\n            ),\n          },\n        });\n      },\n    });\n  }\n\n  return { handleRejectRequest };\n}\n","import React from \"react\";\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\n\ninterface Props {\n  text: string;\n}\n\nexport default function EmptyList({ text }: Props) {\n  return (\n    <List>\n      <ListItem>\n        <ListItemText primary={text} />\n      </ListItem>\n    </List>\n  );\n}\n","import React from \"react\";\nimport FriendRequestItem from \"./FriendRequestItem\";\nimport { CircularProgress, List } from \"@material-ui/core\";\nimport { FriendRequest } from \"../../../types\";\nimport EmptyList from \"../../EmptyList\";\n\ninterface Props {\n  friendRequests: FriendRequest[] | undefined;\n}\n\nfunction FriendRequestList({ friendRequests }: Props) {\n  if (!friendRequests) return <CircularProgress />;\n\n  if (friendRequests.length === 0)\n    return <EmptyList text=\"0 friend requests\" />;\n\n  return (\n    <List>\n      {friendRequests.map((friendRequest) => (\n        <FriendRequestItem\n          key={friendRequest.id}\n          friendRequest={friendRequest}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default FriendRequestList;\n","import React from \"react\";\nimport { Badge, createStyles, IconButton, Popover } from \"@material-ui/core\";\nimport GroupAddIcon from \"@material-ui/icons/GroupAdd\";\nimport FriendRequestList from \"./friendRequests/FriendRequestList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport usePopover from \"../../hooks/usePopover\";\nimport useFriendRequests from \"../../hooks/useFriendRequests\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginLeft: theme.spacing(1),\n    },\n  })\n);\n\nfunction FriendRequests() {\n  const classes = useStyles();\n  const friendRequests = useFriendRequests();\n  const { handleClick, handleClose, open, anchorEl, id } = usePopover({\n    name: \"friend-requests\",\n  });\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        aria-label=\"friend request list\"\n        color=\"inherit\"\n        onClick={handleClick}\n      >\n        <Badge\n          badgeContent={friendRequests ? friendRequests.length : 0}\n          color=\"secondary\"\n        >\n          <GroupAddIcon fontSize=\"large\" />\n        </Badge>\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <FriendRequestList friendRequests={friendRequests} />\n      </Popover>\n    </div>\n  );\n}\n\nexport default FriendRequests;\n","import { useQuery } from \"@apollo/client\";\nimport { FriendRequestsData } from \"../types\";\nimport { GET_FRIEND_REQUESTS } from \"../graphql/queries\";\n\nexport default function useFriendRequests() {\n  const { data } = useQuery<FriendRequestsData>(GET_FRIEND_REQUESTS, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  const friendRequests = data?.friendRequests;\n\n  return friendRequests;\n}\n","import React from \"react\";\nimport { ChatPreview } from \"../../../types\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  makeStyles,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { getFormat } from \"../../../utils\";\nimport EmptyList from \"../../EmptyList\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n\n  link: {\n    textDecoration: \"none\",\n    color: \"inherit\",\n\n    \"& > *\": {\n      \"&:hover\": {\n        backgroundColor: \"#f0f0f0\",\n      },\n    },\n  },\n\n  unreadItem: {\n    backgroundColor: \"#f6f6f6\",\n\n    // the name of the user\n    \"& span\": {\n      fontWeight: \"bold\",\n    },\n\n    // the message content\n    \"& p\": {\n      fontWeight: \"bold\",\n    },\n  },\n\n  content: {\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n  },\n}));\n\ninterface Props {\n  chats: ChatPreview[] | undefined;\n}\n\nexport default function ChatList({ chats }: Props) {\n  const classes = useStyles();\n\n  if (!chats) return <CircularProgress />;\n  if (chats.length === 0) return <EmptyList text=\"0 chats\" />;\n\n  return (\n    <List className={classes.root}>\n      {chats.map(({ id, users, lastMessage, unread }) => (\n        <Link to={`/chats/${id}`} key={id} className={classes.link}>\n          <ListItem className={unread ? classes.unreadItem : \"\"}>\n            <ListItemAvatar>\n              <Avatar src={users[0].avatar} />\n            </ListItemAvatar>\n            <ListItemText\n              className={classes.content}\n              primary={users[0].fullName}\n              secondary={lastMessage.content}\n            />\n            <Typography variant=\"caption\" gutterBottom>\n              <Moment\n                // HH:mm when less than 1 day has elapsed\n                // DD/MM/YYYY when 1 day or more has elapsed\n                format={getFormat(lastMessage.sentTime)}\n                date={lastMessage.sentTime}\n              />\n            </Typography>\n          </ListItem>\n        </Link>\n      ))}\n    </List>\n  );\n}\n","import { USER_PREVIEW } from \"./fragments\";\nimport { gql } from \"@apollo/client\";\n\nexport const MESSAGE_RECEIVED = gql`\n  subscription MessageReceived {\n    messageReceived {\n      id\n      content\n      chatId\n      readTime\n      sentTime\n      user {\n        ...UserPreview\n      }\n    }\n  }\n  ${USER_PREVIEW}\n`;\n","import React from \"react\";\nimport { IconButton, Popover, Badge } from \"@material-ui/core\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport ChatList from \"./chats/ChatList\";\nimport usePopover from \"../../hooks/usePopover\";\nimport { useChats } from \"../../hooks/chat/useChats\";\n\nexport default function Chats() {\n  const { chats, unreadChatsCount } = useChats();\n\n  const { handleClick, handleClose, open, anchorEl, id } = usePopover({\n    name: \"chats\",\n  });\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"show chats\"\n        edge=\"end\"\n        color=\"inherit\"\n        onClick={handleClick}\n      >\n        <Badge color=\"secondary\" badgeContent={unreadChatsCount}>\n          <ChatBubbleIcon fontSize=\"large\" />\n        </Badge>\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <ChatList chats={chats} />\n      </Popover>\n    </div>\n  );\n}\n","import { MessageReceivedData } from \"../../types\";\nimport { useSubscription, useQuery } from \"@apollo/client\";\nimport { GET_CHATS } from \"../../graphql/queries\";\nimport { ChatsData } from \"../../types\";\nimport { MESSAGE_RECEIVED } from \"../../graphql/subscriptions\";\n\nexport function useChats() {\n  const { data, client } = useQuery<ChatsData>(GET_CHATS, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n  const chats = data?.chats || [];\n  const unreadChatsCount = chats\n    ? chats.filter((chat) => chat.unread === true).length\n    : 0;\n\n  useSubscription<MessageReceivedData>(MESSAGE_RECEIVED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const messageReceived = subscriptionData.data?.messageReceived;\n      console.log(\"ddd\");\n\n      if (messageReceived) {\n        const { chats } = client.readQuery({\n          query: GET_CHATS,\n        }) as ChatsData;\n\n        // set the last message of the chat to the received one\n        const messageReceivedChat = {\n          ...chats.find((chat) => chat.id === messageReceived.chatId),\n          lastMessage: messageReceived,\n          unread: true,\n        };\n\n        // get the rest of the chats\n        const otherChats = chats.filter(\n          (chat) => chat.id !== messageReceived.chatId\n        );\n\n        // combined array of those chats\n        const updatedChats = [messageReceivedChat, ...otherChats];\n\n        // update store the store with the chats\n        client.writeQuery({\n          query: GET_CHATS,\n          data: {\n            chats: updatedChats,\n          },\n        });\n      }\n    },\n  });\n\n  return { chats, unreadChatsCount };\n}\n","export enum Status {\n  Pending = \"PENDING\",\n  Friends = \"FRIENDS\",\n}\n\nexport enum NotificationType {\n  PostLiked = \"POST_LIKED\",\n  PostCommented = \"POST_COMMENTED\",\n}\n","import React from \"react\";\nimport { Notification } from \"../../../types\";\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport { NotificationType } from \"../../../enums\";\nimport Moment from \"react-moment\";\n\ninterface Props {\n  notification: Notification;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  })\n);\n\nexport default function NotificationItem({ notification }: Props) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemAvatar>\n        <Avatar src={notification.user.avatar} />\n      </ListItemAvatar>\n      <ListItemText\n        primary={`${notification.user.fullName} ${\n          notification.type === NotificationType.PostLiked\n            ? \"liked\"\n            : \"commented\"\n        } your post!`}\n        secondary={<Moment fromNow date={notification.receivedAt} />}\n      />\n    </ListItem>\n  );\n}\n","import React from \"react\";\nimport { Notification } from \"../../../types\";\nimport { CircularProgress, List } from \"@material-ui/core\";\nimport EmptyList from \"../../EmptyList\";\nimport NotificationItem from \"./NotificationItem\";\n\ninterface Props {\n  notifications: Notification[] | undefined;\n}\n\nexport default function NotificationList({ notifications }: Props) {\n  if (!notifications) return <CircularProgress />;\n  if (notifications.length === 0) return <EmptyList text=\"0 notifications\" />;\n\n  return (\n    <List>\n      {notifications.map((notification) => (\n        <NotificationItem notification={notification} key={notification.id} />\n      ))}\n    </List>\n  );\n}\n","import React from \"react\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport { IconButton, Popover } from \"@material-ui/core\";\nimport NotificationList from \"./notifications/NotificationList\";\nimport usePopover from \"../../hooks/usePopover\";\nimport { useNotifications } from \"../../hooks/useNotifications\";\n\nexport default function Notifications() {\n  const notifications = useNotifications();\n\n  const { id, open, anchorEl, handleClose, handleClick } = usePopover({\n    name: \"notifications\",\n  });\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"show chats\"\n        edge=\"end\"\n        color=\"inherit\"\n        onClick={handleClick}\n      >\n        <NotificationsIcon fontSize=\"large\" />\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <NotificationList notifications={notifications} />\n      </Popover>\n    </div>\n  );\n}\n","import { useQuery } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"../graphql/queries\";\nimport { Notification } from \"../types\";\n\ninterface NotificationsData {\n  notifications: Notification[];\n}\n\nexport function useNotifications() {\n  const { data } = useQuery<NotificationsData>(GET_NOTIFICATIONS, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  const notifications = data?.notifications;\n\n  return notifications;\n}\n","import React, { useState } from \"react\";\nimport SignOutButton from \"../pages/home/SignOutButton\";\nimport { Link } from \"react-router-dom\";\nimport {\n  createStyles,\n  fade,\n  IconButton,\n  Theme,\n  Toolbar,\n  AppBar,\n} from \"@material-ui/core\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Search from \"./appHeader/Search\";\nimport FriendRequests from \"./appHeader/FriendRequests\";\nimport Chats from \"./appHeader/Chats\";\nimport Notifications from \"./appHeader/Notifications\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      textDecoration: \"none\",\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: \"100%\",\n      maxWidth: \"400px\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(1),\n        // width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: \"inherit\",\n    },\n    rest: {\n      display: \"flex\",\n    },\n    toolbar: {\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"12ch\",\n        \"&:focus\": {\n          width: \"20ch\",\n        },\n      },\n    },\n  })\n);\n\nfunction AppHeader() {\n  const classes = useStyles();\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" onBlur={() => setIsSearchOpen(false)}>\n        <Toolbar className={classes.toolbar}>\n          {/* otherwise search is too big for mobile */}\n          {isSearchOpen ? (\n            <Search />\n          ) : (\n            <>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"home\"\n                component={Link}\n                to=\"/\"\n              >\n                <FacebookIcon fontSize=\"large\" />\n              </IconButton>\n              <IconButton color=\"inherit\" onClick={() => setIsSearchOpen(true)}>\n                <SearchIcon fontSize=\"large\" />\n              </IconButton>\n              <FriendRequests />\n              <Chats />\n              <Notifications />\n              <SignOutButton />\n            </>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default AppHeader;\n","import React from \"react\";\nimport { createStyles } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      width: \"100%\",\n      height: 200,\n      zIndex: 9999,\n    },\n\n    img: {\n      objectFit: \"cover\",\n      width: \"100%\",\n      height: \"100%\",\n    },\n\n    badge: {\n      width: \"100%\",\n      height: \"100%\",\n      display: \"flex\",\n    },\n  })\n);\n\ninterface Props {\n  background: string;\n}\n\nfunction Background({ background }: Props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <img\n        src={\n          background ||\n          \"https://cdn.pixabay.com/photo/2018/07/18/19/45/brick-3547144_960_720.jpg\"\n        }\n        alt=\"Your background\"\n        className={classes.img}\n      />\n    </div>\n  );\n}\n\nexport default Background;\n","import { createStyles, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { useUpdateBackground } from \"../../../hooks/upload/useUpdateBackground\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    input: {\n      display: \"none\",\n    },\n    icon: {\n      cursor: \"pointer\",\n      color: \"black\",\n    },\n  })\n);\n\nfunction BackgroundUpload() {\n  const classes = useStyles();\n  const { handleUpdateBackground, loading } = useUpdateBackground();\n\n  return (\n    <div>\n      <input\n        id=\"background-upload\"\n        accept=\"image/*\"\n        type=\"file\"\n        onChange={handleUpdateBackground}\n        className={classes.input}\n      />\n      <label htmlFor=\"background-upload\">\n        <Button variant=\"contained\" component=\"span\" disabled={loading}>\n          Edit background\n        </Button>\n      </label>\n    </div>\n  );\n}\n\nexport default BackgroundUpload;\n","import { useMutation, useApolloClient } from \"@apollo/client\";\nimport { GET_ME, GET_USER } from \"../../graphql/queries\";\nimport { UPDATE_BACKGROUND } from \"../../graphql/mutations\";\nimport { UserData } from \"../../types\";\n\ninterface UpdateBackgroundData {\n  updateBackground: string;\n}\n\ninterface UpdateBackgroundVars {\n  file: File;\n}\n\nexport function useUpdateBackground() {\n  const client = useApolloClient();\n  const data = client.readQuery({ query: GET_ME });\n  const { id } = data.me;\n\n  const [updateBackground, { loading }] = useMutation<\n    UpdateBackgroundData,\n    UpdateBackgroundVars\n  >(UPDATE_BACKGROUND, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  function handleUpdateBackground({\n    target: { validity, files },\n  }: React.ChangeEvent<HTMLInputElement>) {\n    if (!files) throw new Error(\"Invalid input\");\n    const file = files[0];\n\n    return (\n      validity.valid &&\n      updateBackground({\n        variables: { file },\n        update: (store, { data }) => {\n          const { user } = store.readQuery({\n            query: GET_USER,\n            variables: { id },\n          }) as UserData;\n\n          store.writeQuery({\n            query: GET_USER,\n            variables: { id },\n            data: {\n              user: {\n                ...user,\n                background: data?.updateBackground,\n              },\n            },\n          });\n        },\n      })\n    );\n  }\n\n  return { handleUpdateBackground, loading };\n}\n","import React from \"react\";\nimport { Button, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { useCreateChat } from \"../../../hooks/chat/useCreateChat\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n  })\n);\n\nexport default function ChatButton() {\n  const classes = useStyles();\n  const { id: userId } = useParams();\n  const { handleCreateChat } = useCreateChat({ userId });\n\n  return (\n    <div className={classes.root}>\n      <Button variant=\"contained\" onClick={handleCreateChat}>\n        Message\n      </Button>\n    </div>\n  );\n}\n","import { Status, NotificationType } from \"./enums\";\nexport interface UserData {\n  user: UserProfile;\n}\n\nexport interface UserProfile extends UserPreview {\n  background: string;\n  posts: Post[];\n  friends: UserPreview[];\n  friendshipStatus: FriendshipStatus;\n}\n\nexport interface FriendStatus {\n  fromUserId: string;\n  status: Status;\n}\n\nexport interface UserVars {\n  id: string;\n}\n\nexport interface MessageReceivedData {\n  messageReceived: Message;\n}\n\nexport enum FriendshipStatus {\n  Stranger = \"STRANGER\",\n  Friend = \"FRIEND\",\n  MeSentRequest = \"ME_SENT_REQUEST\",\n  MeReceivedRequest = \"ME_RECEIVED_REQUEST\",\n}\n\nexport interface MessagePreview {\n  id: string;\n  content: string;\n}\n\nexport interface Notification {\n  id: string;\n  receivedAt: Date;\n  postId: string;\n  user: UserPreview;\n  type: NotificationType;\n}\n\nexport interface ChatPreview {\n  id: string;\n  users: UserPreview[];\n  lastMessage: Message;\n  unread: Boolean;\n}\n\nexport interface PostsData {\n  posts: {\n    __typename: \"posts\";\n    edges: Post[];\n    pageInfo: {\n      hasNextPage: boolean;\n      endCursor: number;\n    };\n  };\n}\n\nexport interface UserPreview {\n  id: string;\n  fullName: string;\n  avatar: string;\n}\n\nexport interface ChatsData {\n  chats: ChatPreview[];\n}\n\nexport interface Message {\n  id: string;\n  content: string;\n  sentTime: Date;\n  user: UserPreview;\n  chatId: string;\n}\n\nexport interface Chat {\n  id: string;\n  messages: Message[];\n  users: UserPreview[];\n}\n\nexport interface ChatData {\n  chat: Chat;\n}\n\nexport interface LikesInfo {\n  likes: number;\n  isLiked: boolean;\n}\n\nexport interface CommentsInfo {\n  comments: number;\n}\n\nexport interface CommentsData {\n  comments: Comment[];\n}\n\nexport interface Comment {\n  id: string;\n  createdAt: Date;\n  content: string;\n  user: UserPreview;\n}\n\nexport interface Post {\n  id: string;\n  content: string;\n  createdAt: Date;\n  likesInfo: LikesInfo;\n  commentsInfo: CommentsInfo;\n  user: UserPreview;\n}\n\nexport interface FriendRequest {\n  id: string;\n  sentTime: Date;\n  fromUser: UserPreview;\n}\n\nexport interface FriendRequestsData {\n  friendRequests: FriendRequest[];\n}\n\nexport interface MeData {\n  me: UserPreview;\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { Chat } from \"../../types\";\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_CHAT } from \"../../graphql/mutations\";\n\ninterface Props {\n  userId: string;\n}\n\ninterface CreateChatData {\n  createChat: Chat;\n}\n\ninterface CreateChatVars {\n  userId: string;\n}\n\nexport function useCreateChat({ userId }: Props) {\n  const navigate = useNavigate();\n  const [createChat] = useMutation<CreateChatData, CreateChatVars>(\n    CREATE_CHAT,\n    {\n      onError: (error) => {\n        console.log(error.graphQLErrors[0].message);\n      },\n    }\n  );\n\n  async function handleCreateChat() {\n    const res = await createChat({\n      variables: { userId },\n      update: (store, { data }) => {\n        console.log(data);\n      },\n    });\n\n    navigate(`/chats/${res.data?.createChat.id}`);\n  }\n\n  return { handleCreateChat };\n}\n","import { useSendRequest } from \"./useSendRequest\";\nimport { useUnfriend } from \"./useUnfriend\";\nimport { useCancelRequest } from \"./useCancelRequest\";\nimport { useAcceptRequest } from \"./useAcceptRequest\";\n\ninterface Props {\n  userId: string;\n}\n\nexport const useFriendButton = ({ userId }: Props) => {\n  const { handleSendRequest } = useSendRequest({ userId });\n  const { handleUnfriend } = useUnfriend({ userId });\n  const { handleCancelRequest } = useCancelRequest({ userId });\n  const { handleAcceptRequest } = useAcceptRequest({ userId });\n\n  return {\n    handleSendRequest,\n    handleUnfriend,\n    handleCancelRequest,\n    handleAcceptRequest,\n  };\n};\n","import { UserData, FriendshipStatus } from \"../../types\";\nimport { GET_USER } from \"../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { SEND_REQUEST } from \"../../graphql/mutations\";\n\ninterface Props {\n  userId: string;\n}\n\ninterface SendRequestData {\n  sendRequest: boolean;\n}\n\ninterface SendRequestVars {\n  userId: string;\n}\n\nexport function useSendRequest({ userId }: Props) {\n  const [sendRequest] = useMutation<SendRequestData, SendRequestVars>(\n    SEND_REQUEST,\n    {\n      onError: (error) => {\n        console.log(error.graphQLErrors[0].message);\n      },\n    }\n  );\n\n  async function handleSendRequest() {\n    await sendRequest({\n      variables: { userId },\n      optimisticResponse: {\n        sendRequest: true,\n      },\n      update: (store) => {\n        const { user } = store.readQuery({\n          query: GET_USER,\n          variables: { id: userId },\n        }) as UserData;\n\n        store.writeQuery({\n          query: GET_USER,\n          variables: { id: userId },\n          data: {\n            user: {\n              ...user,\n              friendshipStatus: FriendshipStatus.MeSentRequest,\n            },\n          },\n        });\n      },\n    });\n  }\n\n  return { handleSendRequest };\n}\n","import { UserData } from \"./../../types\";\nimport { GET_USER } from \"./../../graphql/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport { UNFRIEND } from \"../../graphql/mutations\";\nimport { FriendshipStatus } from \"../../types\";\n\ninterface Props {\n  userId: string;\n}\n\nexport function useUnfriend({ userId }: Props) {\n  const [unfriend] = useMutation(UNFRIEND, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  async function handleUnfriend() {\n    return unfriend({\n      variables: { userId },\n      update: (store) => {\n        const { user } = store.readQuery({\n          query: GET_USER,\n          variables: { id: userId },\n        }) as UserData;\n\n        store.writeQuery({\n          query: GET_USER,\n          variables: { userId },\n          data: {\n            user: {\n              ...user,\n              friendshipStatus: FriendshipStatus.Stranger,\n            },\n          },\n        });\n      },\n    });\n  }\n\n  return { handleUnfriend };\n}\n","import { FriendshipStatus, UserData } from \"./../../types\";\nimport { useMutation } from \"@apollo/client\";\nimport { GET_USER } from \"../../graphql/queries\";\nimport { CANCEL_REQUEST } from \"../../graphql/mutations\";\n\ninterface Props {\n  userId: string;\n}\n\nexport function useCancelRequest({ userId }: Props) {\n  const [cancelRequest] = useMutation(CANCEL_REQUEST, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  async function handleCancelRequest() {\n    return cancelRequest({\n      variables: { userId },\n      optimisticResponse: {\n        cancelRequest: true,\n      },\n      update: (store) => {\n        const { user } = store.readQuery({\n          query: GET_USER,\n          variables: { id: userId },\n        }) as UserData;\n\n        store.writeQuery({\n          query: GET_USER,\n          variables: { id: userId },\n          data: {\n            user: {\n              ...user,\n              friendshipStatus: FriendshipStatus.Stranger,\n            },\n          },\n        });\n      },\n    });\n  }\n\n  return { handleCancelRequest };\n}\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { FriendshipStatus } from \"../../../types\";\nimport { useFriendButton } from \"../../../hooks/friend/useFriendButton\";\nimport { useParams } from \"react-router\";\nimport { useFriendshipStatus } from \"../../../hooks/friend/useFriendshipStatus\";\n\nfunction FriendButton() {\n  const { id: userId } = useParams();\n\n  const {\n    handleSendRequest,\n    handleUnfriend,\n    handleCancelRequest,\n    handleAcceptRequest,\n  } = useFriendButton({\n    userId,\n  });\n\n  const friendshipStatus = useFriendshipStatus({ userId });\n\n  let handleClick;\n  let text;\n\n  switch (friendshipStatus) {\n    case FriendshipStatus.Stranger:\n      handleClick = handleSendRequest;\n      text = \"Add friend\";\n      break;\n    case FriendshipStatus.Friend:\n      handleClick = handleUnfriend;\n      text = \"Unfriend\";\n      break;\n    case FriendshipStatus.MeSentRequest:\n      handleClick = handleCancelRequest;\n      text = \"Cancel request\";\n      break;\n    case FriendshipStatus.MeReceivedRequest:\n      handleClick = handleAcceptRequest;\n      text = \"Accept request\";\n      break;\n  }\n\n  return (\n    <Button variant=\"contained\" onClick={handleClick}>\n      {text}\n    </Button>\n  );\n}\n\nexport default FriendButton;\n","import { UserData } from \"./../../types\";\nimport { GET_USER } from \"../../graphql/queries\";\nimport { useApolloClient } from \"@apollo/client\";\n\ninterface Props {\n  userId: string;\n}\n\nexport function useFriendshipStatus({ userId }: Props) {\n  const client = useApolloClient();\n  const {\n    user: { friendshipStatus },\n  } = client.readQuery({\n    query: GET_USER,\n    variables: { id: userId },\n  }) as UserData;\n\n  return friendshipStatus;\n}\n","import React from \"react\";\nimport BackgroundUpload from \"./BackgroundUpload\";\nimport ChatButton from \"./ChatButton\";\nimport FriendButton from \"./FriendButton\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { useParams } from \"react-router\";\nimport { useMe } from \"../../../hooks/useMe\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n  })\n);\n\nexport default function Menu() {\n  const classes = useStyles();\n  const { id } = useParams();\n  const me = useMe();\n  const isMyProfile = me.id === id;\n  return (\n    <div className={classes.root}>\n      {isMyProfile ? (\n        <BackgroundUpload />\n      ) : (\n        <>\n          <FriendButton />\n          <ChatButton />\n        </>\n      )}\n    </div>\n  );\n}\n","import { Avatar, withStyles } from \"@material-ui/core\";\n\nexport const StyledProfileAvatar = withStyles((theme) => ({\n  root: {\n    border: \"thick solid #f0f0f0\",\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n}))(Avatar);\n","import React from \"react\";\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  CircularProgress,\n  createStyles,\n  IconButton,\n  Theme,\n} from \"@material-ui/core\";\nimport { useUpdateAvatarManagement } from \"../../../hooks/upload/useUpdateAvatarManagement\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    input: {\n      display: \"none\",\n    },\n    icon: {\n      cursor: \"pointer\",\n      color: \"black\",\n    },\n    button: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n      backgroundColor: \"#f0f0f0\",\n      borderRadius: \"50%\",\n      \"&:hover\": {\n        backgroundColor: \"#d0d0d0\",\n      },\n    },\n  })\n);\n\nfunction AvatarUpload() {\n  const classes = useStyles();\n  const { handleUpdateAvatar, loading } = useUpdateAvatarManagement();\n\n  if (loading) return <CircularProgress className={classes.button} />;\n\n  return (\n    <div>\n      <input\n        id=\"avatar-upload\"\n        accept=\"image/*\"\n        type=\"file\"\n        onChange={handleUpdateAvatar}\n        className={classes.input}\n      />\n      <label htmlFor=\"avatar-upload\">\n        <IconButton component=\"span\" className={classes.button}>\n          <AddAPhotoIcon className={classes.icon} />\n        </IconButton>\n      </label>\n    </div>\n  );\n}\n\nexport default AvatarUpload;\n","import { useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../../graphql/queries\";\nimport { UPDATE_AVATAR } from \"../../graphql/mutations\";\nimport { MeData } from \"../../types\";\n\ninterface UpdateAvatarData {\n  updateAvatar: string;\n}\n\ninterface UpdateAvatarVars {\n  file: File;\n}\n\nexport function useUpdateAvatarManagement() {\n  const [updateAvatar, { loading }] = useMutation<\n    UpdateAvatarData,\n    UpdateAvatarVars\n  >(UPDATE_AVATAR, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  function handleUpdateAvatar({\n    target: {\n      validity,\n      files: [file],\n    },\n  }: any) {\n    return (\n      validity.valid &&\n      updateAvatar({\n        variables: { file },\n        update: (store, { data }) => {\n          const dataInStore = store.readQuery({ query: GET_ME }) as MeData;\n\n          store.writeQuery({\n            query: GET_ME,\n            data: {\n              me: {\n                ...dataInStore.me,\n                avatar: data?.updateAvatar,\n              },\n            },\n          });\n        },\n      })\n    );\n  }\n\n  return { handleUpdateAvatar, loading };\n}\n","import React from \"react\";\nimport { Badge, createStyles, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AvatarUpload from \"../AvatarUpload\";\nimport { useMe } from \"../../../../hooks/useMe\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    badge: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n);\n\ninterface Props {\n  children: React.ReactElement;\n}\n\nfunction EditWrapper({ children }: Props) {\n  const classes = useStyles();\n  const me = useMe();\n  const { id } = useParams();\n\n  const isMyProfile = me.id === id;\n\n  return isMyProfile ? (\n    <Badge\n      overlap=\"circle\"\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n      badgeContent={<AvatarUpload />}\n      className={classes.badge}\n    >\n      {children}\n    </Badge>\n  ) : (\n    children\n  );\n}\n\nexport default EditWrapper;\n","import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { StyledProfileAvatar } from \"../../../styled/StyledProfileAvatar\";\nimport EditWrapper from \"./myAvatar/EditWrapper\";\n\ninterface Props {\n  avatar: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"flex-end\",\n      alignSelf: \"flex-start\",\n      width: \"100%\",\n      position: \"relative\",\n    },\n    wrapper: {\n      position: \"absolute\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n      zIndex: 999,\n    },\n  })\n);\n\nexport default function MyAvatar({ avatar }: Props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.wrapper}>\n        <EditWrapper>\n          <StyledProfileAvatar src={avatar} alt={\"Avatar\"} />\n        </EditWrapper>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createStyles, Theme, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Background from \"./header/Background\";\nimport Menu from \"./header/Menu\";\nimport { useProfileHeader } from \"../../hooks/useProfileHeader\";\nimport MyAvatar from \"./header/MyAvatar\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      justifyContent: \"center\",\n      width: \"100%\",\n      padding: theme.spacing(3),\n      marginBottom: theme.spacing(2),\n    },\n    grid: {\n      borderColor: \"red\",\n      borderStyle: \"solid\",\n      borderWidth: \"10px\",\n    },\n    images: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"flex-end\",\n      alignSelf: \"flex-start\",\n      width: \"100%\",\n      position: \"relative\",\n    },\n    name: {\n      width: \"100%\",\n    },\n    imagesWrapper: {\n      position: \"absolute\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n      zIndex: 999,\n    },\n  })\n);\n\nfunction ProfileHeader() {\n  const classes = useStyles();\n  const { user } = useProfileHeader();\n\n  return (\n    <div className={classes.root}>\n      <Background background={user.background} />\n      <MyAvatar avatar={user.avatar} />\n      <div className={classes.name}>\n        <Typography align=\"center\" variant=\"h2\">\n          {user.fullName}\n        </Typography>\n      </div>\n      <Menu />\n    </div>\n  );\n}\n\nexport default ProfileHeader;\n","import { useParams } from \"react-router-dom\";\nimport { UserData } from \"./../types\";\nimport { GET_USER } from \"./../graphql/queries\";\nimport { useApolloClient } from \"@apollo/client\";\n\nexport function useProfileHeader() {\n  const client = useApolloClient();\n  const { id } = useParams();\n  const { user } = client.readQuery({\n    query: GET_USER,\n    variables: { id },\n  }) as UserData;\n\n  return { user };\n}\n","import React from \"react\";\nimport PostItem from \"../../components/posts/PostItem\";\nimport { usePosts } from \"../../hooks/post/usePosts\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport EmptyList from \"../../components/EmptyList\";\n\nfunction Posts() {\n  const posts = usePosts();\n\n  if (!posts) return <CircularProgress />;\n  if (posts.length === 0) return <EmptyList text=\"0 posts\" />;\n\n  return (\n    <div>\n      <ul>\n        {posts.map((post) => (\n          <PostItem key={post.id} post={post} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Posts;\n","import { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_POSTS } from \"../../graphql/queries\";\nimport { PostsData } from \"../../types\";\n\ninterface PostsVars {\n  userId?: string;\n}\n\nexport function usePosts() {\n  // gonna be undefined if it's home page\n  const { id: userId } = useParams();\n  const variables = userId && { variables: { userId } };\n\n  const { data } = useQuery<PostsData, PostsVars>(GET_POSTS, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n    ...variables,\n  });\n\n  const posts = data?.posts.edges;\n\n  return posts;\n}\n","import React from \"react\";\nimport { UserPreview } from \"../../../types\";\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  makeStyles,\n  createStyles,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  friend: UserPreview;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    link: {\n      textDecoration: \"none\",\n      color: \"inherit\",\n    },\n  })\n);\n\nexport default function FriendItem({ friend }: Props) {\n  const classes = useStyles();\n\n  return (\n    <ListItem key={friend.id}>\n      <ListItemAvatar>\n        <Link to={`/users/${friend.id}`}>\n          <Avatar src={friend.avatar} alt=\"Friend's avatar\" />\n        </Link>\n      </ListItemAvatar>\n      <Link to={`/users/${friend.id}`} className={classes.link}>\n        <ListItemText primary={friend.fullName} />\n      </Link>\n    </ListItem>\n  );\n}\n","import React from \"react\";\nimport { List } from \"@material-ui/core\";\nimport { UserPreview } from \"../../../types\";\nimport FriendItem from \"./FriendItem\";\n\ninterface Props {\n  friends: UserPreview[];\n}\n\nfunction FriendList({ friends }: Props) {\n  return (\n    <div>\n      <List>\n        {friends.map((friend: UserPreview) => (\n          <FriendItem friend={friend} key={friend.id} />\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default FriendList;\n","import React from \"react\";\nimport FriendList from \"./friends/FriendList\";\nimport { useParams } from \"react-router\";\nimport { useFriends } from \"../../hooks/useFriends\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function Friends() {\n  const { id } = useParams();\n  const friends = useFriends({ id });\n\n  return (\n    <div>\n      <Typography variant=\"h5\" align=\"center\">\n        {friends.length} {friends.length === 1 ? \"friend\" : \"friends\"}\n      </Typography>\n      <FriendList friends={friends} />\n    </div>\n  );\n}\n","import { UserData } from \"./../types\";\nimport { GET_USER } from \"./../graphql/queries\";\nimport { useApolloClient } from \"@apollo/client\";\ninterface Props {\n  id: string;\n}\n\nexport function useFriends({ id }: Props) {\n  const client = useApolloClient();\n  const { user } = client.readQuery({\n    query: GET_USER,\n    variables: { id },\n  }) as UserData;\n  const { friends } = user;\n\n  return friends;\n}\n","import React from \"react\";\nimport {\n  CircularProgress,\n  Container,\n  createStyles,\n  Grid,\n} from \"@material-ui/core\";\nimport ProfileHeader from \"./profile/Header\";\nimport Posts from \"./profile/Posts\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Friends from \"./profile/Friends\";\nimport { useProfile } from \"../hooks/useProfile\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n  })\n);\n\nfunction Profile() {\n  const classes = useStyles();\n  const { user } = useProfile();\n\n  // load the profile before displaying anything\n  if (!user) return <CircularProgress />;\n\n  return (\n    <Container maxWidth=\"md\" component=\"main\" className={classes.root}>\n      <ProfileHeader />\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={4} className={classes.grid}>\n          <Friends />\n        </Grid>\n        <Grid item xs={12} sm={8}>\n          <Posts />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default Profile;\n","import { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { UserData, UserVars } from \"../types\";\nimport { GET_USER } from \"../graphql/queries\";\n\nexport function useProfile() {\n  const { id } = useParams();\n  const { data, loading } = useQuery<UserData, UserVars>(GET_USER, {\n    variables: { id },\n  });\n\n  // so that it doesnt return the previous user on profile change\n  const user = loading ? null : data?.user;\n\n  return { user };\n}\n","import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport MyTextField from \"../../components/MyTextField\";\nimport { Button } from \"@material-ui/core\";\nimport { useCreateMessageForm } from \"../../hooks/chat/useCreateMessageForm\";\n\ninterface Props {\n  chatId: string;\n}\n\nexport default function CreateMessageForm({ chatId }: Props) {\n  const {\n    handleCreateMessage,\n    initialValues,\n    validationSchema,\n  } = useCreateMessageForm({ chatId });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleCreateMessage}\n      validationSchema={validationSchema}\n    >\n      {() => (\n        <Form noValidate>\n          <div>\n            <MyTextField\n              type=\"text\"\n              name=\"content\"\n              autoComplete=\"off\"\n              margin=\"none\"\n            />\n          </div>\n          <Button variant=\"contained\" type=\"submit\" fullWidth>\n            Send\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { CreateMessageInput } from \"../../../../server/src/resolvers/message/CreateMessageInput\";\nimport { Message, ChatData } from \"../../types\";\nimport { useMutation } from \"@apollo/client\";\nimport * as Yup from \"yup\";\nimport { GET_CHAT } from \"../../graphql/queries\";\nimport { CREATE_MESSAGE } from \"../../graphql/mutations\";\n\ninterface CreateMessageData {\n  createMessage: Message;\n}\n\ninterface CreateMessageVars {\n  input: CreateMessageInput;\n  chatId: string;\n}\n\ninterface Props {\n  chatId: string;\n}\n\nexport function useCreateMessageForm({ chatId }: Props) {\n  const initialValues: CreateMessageInput = {\n    content: \"\",\n  };\n\n  const [createMessage] = useMutation<CreateMessageData, CreateMessageVars>(\n    CREATE_MESSAGE,\n    {\n      onError: (error) => {\n        console.log(error.graphQLErrors[0].message);\n      },\n    }\n  );\n\n  function handleCreateMessage(input: CreateMessageInput, { resetForm }: any) {\n    return createMessage({\n      variables: { input, chatId },\n      update: (store, { data }) => {\n        const { chat } = store.readQuery({\n          query: GET_CHAT,\n          variables: { id: chatId },\n        }) as ChatData;\n\n        if (data) {\n          store.writeQuery({\n            query: GET_CHAT,\n            variables: { id: chatId },\n            data: {\n              chat: {\n                ...chat,\n                messages: chat.messages.concat(data.createMessage),\n              },\n            },\n          });\n        }\n\n        resetForm();\n      },\n    });\n  }\n\n  const validationSchema = Yup.object().shape({});\n\n  return { handleCreateMessage, initialValues, validationSchema };\n}\n","import React from \"react\";\nimport { Message } from \"../../types\";\nimport {\n  ListItem,\n  Avatar,\n  ListItemText,\n  makeStyles,\n  createStyles,\n} from \"@material-ui/core\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  message: Message;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    wrap: {\n      wordWrap: \"break-word\",\n    },\n  })\n);\n\nexport default function MessageItem({ message }: Props) {\n  const classes = useStyles();\n  return (\n    <ListItem key={message.id}>\n      <Link to={`/users/${message.user.id}`}>\n        <Avatar src={message.user.avatar} />\n      </Link>\n      <ListItemText\n        className={classes.wrap}\n        primary={message.content}\n        secondary={<Moment fromNow date={message.sentTime} />}\n      />\n    </ListItem>\n  );\n}\n","import React from \"react\";\nimport { Message } from \"../../types\";\nimport MessageItem from \"./MessageItem\";\nimport { List } from \"@material-ui/core\";\n\ninterface Props {\n  messages: Message[];\n}\n\nexport default function MessageList({ messages }: Props) {\n  return (\n    <List>\n      {messages.map((message) => (\n        <MessageItem message={message} key={message.id} />\n      ))}\n    </List>\n  );\n}\n","import React from \"react\";\nimport { UserPreview } from \"../../types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Typography,\n  Avatar,\n  makeStyles,\n  createStyles,\n} from \"@material-ui/core\";\n\ninterface Props {\n  users: UserPreview[];\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    userInfo: {\n      display: \"flex\",\n      alignItems: \"center\",\n      textDecoration: \"none\",\n      \"&:visited\": {\n        color: \"inherit\",\n      },\n    },\n  })\n);\n\nexport default function Members({ users }: Props) {\n  const classes = useStyles();\n\n  return (\n    <div>\n      {users.map((user) => (\n        <Link\n          to={`/users/${user.id}`}\n          className={classes.userInfo}\n          key={user.id}\n        >\n          <Avatar src={user.avatar} />\n          <Typography variant=\"h5\">{user.fullName}</Typography>\n        </Link>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { useChat } from \"../hooks/chat/useChat\";\nimport CreateMessageForm from \"./chat/CreateMessageForm\";\nimport MessageList from \"./chat/MessageList\";\nimport Members from \"./chat/Members\";\n\nexport default function Chat() {\n  const { id: chatId } = useParams();\n  const { chat } = useChat({ chatId });\n\n  if (!chat) return <CircularProgress />;\n\n  const { messages, users } = chat;\n\n  return (\n    <div>\n      <Members users={users} />\n      <MessageList messages={messages} />\n      <CreateMessageForm chatId={chatId} />\n    </div>\n  );\n}\n","import { GET_CHAT, GET_CHATS } from \"./../../graphql/queries\";\nimport { ChatData, MessageReceivedData, ChatsData } from \"./../../types\";\nimport { useQuery, useSubscription } from \"@apollo/client\";\nimport { MESSAGE_RECEIVED } from \"../../graphql/subscriptions\";\n\ninterface Props {\n  chatId: string;\n}\n\nexport const useChat = ({ chatId }: Props) => {\n  const { data, client } = useQuery<ChatData>(GET_CHAT, {\n    variables: { id: chatId },\n  });\n\n  const chat = data?.chat;\n\n  // update the unread badge (mark the chat as read)\n  if (chat) {\n    const { chats } = client.readQuery({ query: GET_CHATS }) as ChatsData;\n    const theChat = chats.find((chat) => chat.id === chatId);\n    if (theChat) {\n      const readChat = { ...theChat, unread: false };\n      client.writeQuery({\n        query: GET_CHATS,\n        data: {\n          chats: chats.map((chat) => (chat.id === chatId ? readChat : chat)),\n        },\n      });\n    }\n  }\n\n  useSubscription<MessageReceivedData>(MESSAGE_RECEIVED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const messageReceived = subscriptionData.data?.messageReceived;\n\n      console.log(messageReceived);\n\n      if (messageReceived && chat) {\n        client.writeQuery({\n          query: GET_CHAT,\n          variables: { id: chatId },\n          data: {\n            chat: { ...chat, messages: chat.messages.concat(messageReceived) },\n          },\n        });\n      }\n    },\n  });\n\n  return { chat };\n};\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ME } from \"./graphql/queries\";\nimport SignInOrUp from \"./pages/Sign\";\nimport Home from \"./pages/Home\";\nimport { Route, Routes } from \"react-router-dom\";\nimport AppHeader from \"./components/AppHeader\";\nimport Profile from \"./pages/Profile\";\nimport { MeData } from \"./types\";\nimport Chat from \"./pages/Chat\";\n\nconst App: React.FC = () => {\n  const { data, loading } = useQuery<MeData>(GET_ME, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message);\n    },\n  });\n\n  if (loading) return null;\n\n  if (!data?.me) return <SignInOrUp />;\n\n  return (\n    <div>\n      <AppHeader />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"users/:id\" element={<Profile />} />\n        <Route path=\"chats/:id\" element={<Chat />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  split,\n} from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { WebSocketLink } from \"@apollo/link-ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nconst uploadLink = createUploadLink({\n  uri: \"/graphql\",\n  credentials: \"same-origin\",\n}) as any;\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  uploadLink\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <BrowserRouter>\n      <CssBaseline />\n      <App />\n    </BrowserRouter>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}